# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pca
else:
    import _pca

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pca.delete_SwigPyIterator

    def value(self):
        return _pca.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pca.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pca.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pca.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pca.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pca.SwigPyIterator_copy(self)

    def next(self):
        return _pca.SwigPyIterator_next(self)

    def __next__(self):
        return _pca.SwigPyIterator___next__(self)

    def previous(self):
        return _pca.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pca.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pca.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pca.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pca.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pca.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pca.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pca.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pca:
_pca.SwigPyIterator_swigregister(SwigPyIterator)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pca.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pca.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pca.DoubleVector___bool__(self)

    def __len__(self):
        return _pca.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pca.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pca.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pca.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pca.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pca.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pca.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pca.DoubleVector_pop(self)

    def append(self, x):
        return _pca.DoubleVector_append(self, x)

    def empty(self):
        return _pca.DoubleVector_empty(self)

    def size(self):
        return _pca.DoubleVector_size(self)

    def swap(self, v):
        return _pca.DoubleVector_swap(self, v)

    def begin(self):
        return _pca.DoubleVector_begin(self)

    def end(self):
        return _pca.DoubleVector_end(self)

    def rbegin(self):
        return _pca.DoubleVector_rbegin(self)

    def rend(self):
        return _pca.DoubleVector_rend(self)

    def clear(self):
        return _pca.DoubleVector_clear(self)

    def get_allocator(self):
        return _pca.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pca.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pca.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _pca.DoubleVector_swiginit(self, _pca.new_DoubleVector(*args))

    def push_back(self, x):
        return _pca.DoubleVector_push_back(self, x)

    def front(self):
        return _pca.DoubleVector_front(self)

    def back(self):
        return _pca.DoubleVector_back(self)

    def assign(self, n, x):
        return _pca.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pca.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pca.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pca.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pca.DoubleVector_capacity(self)
    __swig_destroy__ = _pca.delete_DoubleVector

# Register DoubleVector in _pca:
_pca.DoubleVector_swigregister(DoubleVector)
class pca(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pca.pca_swiginit(self, _pca.new_pca(*args))
    __swig_destroy__ = _pca.delete_pca

    def __eq__(self, other):
        return _pca.pca___eq__(self, other)

    def set_num_variables(self, num_vars):
        return _pca.pca_set_num_variables(self, num_vars)

    def get_num_variables(self):
        return _pca.pca_get_num_variables(self)

    def add_record(self, record):
        return _pca.pca_add_record(self, record)

    def get_record(self, record_index):
        return _pca.pca_get_record(self, record_index)

    def get_num_records(self):
        return _pca.pca_get_num_records(self)

    def set_do_normalize(self, do_normalize):
        return _pca.pca_set_do_normalize(self, do_normalize)

    def get_do_normalize(self):
        return _pca.pca_get_do_normalize(self)

    def set_solver(self, solver):
        return _pca.pca_set_solver(self, solver)

    def get_solver(self):
        return _pca.pca_get_solver(self)

    def solve(self):
        return _pca.pca_solve(self)

    def check_eigenvectors_orthogonal(self):
        return _pca.pca_check_eigenvectors_orthogonal(self)

    def check_projection_accurate(self):
        return _pca.pca_check_projection_accurate(self)

    def save(self, basename):
        return _pca.pca_save(self, basename)

    def load(self, basename):
        return _pca.pca_load(self, basename)

    def set_num_retained(self, num_retained):
        return _pca.pca_set_num_retained(self, num_retained)

    def get_num_retained(self):
        return _pca.pca_get_num_retained(self)

    def to_principal_space(self, record):
        return _pca.pca_to_principal_space(self, record)

    def to_variable_space(self, data):
        return _pca.pca_to_variable_space(self, data)

    def get_energy(self):
        return _pca.pca_get_energy(self)

    def get_eigenvalue(self, eigen_index):
        return _pca.pca_get_eigenvalue(self, eigen_index)

    def get_eigenvalues(self):
        return _pca.pca_get_eigenvalues(self)

    def get_eigenvector(self, eigen_index):
        return _pca.pca_get_eigenvector(self, eigen_index)

    def get_principal(self, eigen_index):
        return _pca.pca_get_principal(self, eigen_index)

    def get_mean_values(self):
        return _pca.pca_get_mean_values(self)

    def get_sigma_values(self):
        return _pca.pca_get_sigma_values(self)

# Register pca in _pca:
_pca.pca_swigregister(pca)

def make_covariance_matrix(data):
    return _pca.make_covariance_matrix(data)

def make_shuffled_matrix(data):
    return _pca.make_shuffled_matrix(data)

def compute_column_means(data):
    return _pca.compute_column_means(data)

def remove_column_means(data, means):
    return _pca.remove_column_means(data, means)

def compute_column_rms(data):
    return _pca.compute_column_rms(data)

def normalize_by_column(data, rms):
    return _pca.normalize_by_column(data, rms)

def enforce_positive_sign_by_column(data):
    return _pca.enforce_positive_sign_by_column(data)

def extract_column_vector(data, index):
    return _pca.extract_column_vector(data, index)

def extract_row_vector(data, index):
    return _pca.extract_row_vector(data, index)

def assert_file_good(is_file_good, filename):
    return _pca.assert_file_good(is_file_good, filename)

def get_mean(iter):
    return _pca.get_mean(iter)

def get_sigma(iter):
    return _pca.get_sigma(iter)
class join_helper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def add_to_stream(stream):
        return _pca.join_helper_add_to_stream(stream)

    def __init__(self):
        _pca.join_helper_swiginit(self, _pca.new_join_helper())
    __swig_destroy__ = _pca.delete_join_helper

# Register join_helper in _pca:
_pca.join_helper_swigregister(join_helper)

